// <auto-generated />
using Library.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Library.Infrastructure.Models.BookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LibraryMemberId");

                    b.ToTable("Books", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Library.Infrastructure.Models.BookTagModel", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.LibraryMemberModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LibraryMembers");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.TagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.AudioBookModel", b =>
                {
                    b.HasBaseType("Library.Infrastructure.Models.BookModel");

                    b.Property<string>("AudioFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("DurationInMinutes")
                        .HasColumnType("REAL");

                    b.ToTable("AudioBooks", (string)null);
                });

            modelBuilder.Entity("Library.Infrastructure.Models.EBookModel", b =>
                {
                    b.HasBaseType("Library.Infrastructure.Models.BookModel");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("FileSizeMB")
                        .HasColumnType("REAL");

                    b.ToTable("EBooks", (string)null);
                });

            modelBuilder.Entity("Library.Infrastructure.Models.BookModel", b =>
                {
                    b.HasOne("Library.Infrastructure.Models.LibraryMemberModel", "LibraryMember")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("LibraryMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryMember");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.BookTagModel", b =>
                {
                    b.HasOne("Library.Infrastructure.Models.BookModel", "Book")
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Infrastructure.Models.TagModel", "Tag")
                        .WithMany("BookTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.AudioBookModel", b =>
                {
                    b.HasOne("Library.Infrastructure.Models.BookModel", null)
                        .WithOne()
                        .HasForeignKey("Library.Infrastructure.Models.AudioBookModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Infrastructure.Models.EBookModel", b =>
                {
                    b.HasOne("Library.Infrastructure.Models.BookModel", null)
                        .WithOne()
                        .HasForeignKey("Library.Infrastructure.Models.EBookModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Infrastructure.Models.BookModel", b =>
                {
                    b.Navigation("BookTags");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.LibraryMemberModel", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("Library.Infrastructure.Models.TagModel", b =>
                {
                    b.Navigation("BookTags");
                });
#pragma warning restore 612, 618
        }
    }
}
